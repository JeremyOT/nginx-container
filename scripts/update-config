#!/usr/bin/env python
import shutil
import sys
import argparse
import json
import os
import hashlib
import subprocess
from traceback import format_exc
from time import sleep
from urllib2 import urlopen

CONF_DIR = '/etc/nginx/sites-enabled'
MAIN_SCOPE_CONF_DIR = '/etc/nginx/main-scope-conf'
CONF_SOURCE_DIR = '/var/nginx/conf'
DEFAULT_MAIN_SCOPE_CONF_FILE = 'default'

def fast_print(args):
  print args
  sys.stdout.flush()

def get_data(label, key):
  for conf_retry in xrange(1, 6):
    try:
      url = '%s%s' % (options.etcd_url, key)
      conf = json.load(urlopen(url))['node']['value']
      return conf
    except Exception as e:
      fast_print("Error loading %s: %s" % (label, e))
      sleep(conf_retry ** 2)
  raise e

def get_upstream(upstream_url):
  return sorted([str(w['value']) for w in json.load(urlopen(upstream_url))['node'].get('nodes', [])])

def replace_upstream(conf_file, conf_data, upstream, section_id=''):
  if not upstream:
    return conf_data
  conf = conf_data.split('\n')
  upstream_start = -1
  upstream_end = -1
  for i, l in enumerate(conf):
    if l.strip().startswith('upstream'):
      if section_id and l.split()[1] != section_id:
          continue
      upstream_start = i
    if upstream_start > -1 and l.strip().startswith('}'):
      upstream_end = i
      break
  if upstream_start > -1 and upstream:
    source_conf = conf
    conf = source_conf[:upstream_start+1]
    for h in upstream:
      conf.append('server %s;' % h)
    conf.extend(source_conf[upstream_end:])
  return '\n'.join(conf)

def write_conf(conf_file, conf, previous_hash=None):
  sha = hashlib.sha256(conf).hexdigest()
  if sha == previous_hash:
    return sha
  with open(conf_file, 'wb') as f:
    f.write(conf)
    print 'Updated %s: %s' % (conf_file, sha)
  return sha

def make_replace_map(replace_list, splitter=':'):
  replace_map = {}
  if not replace_list:
    return replace_map
  for r in replace_list:
    pair = ['','']
    part = 0
    split_string = r.split(splitter)
    if len(split_string) < 2:
      continue
    for i, s in enumerate(split_string):
      if s:
        if i > 0 and split_string[i-1]:
          part += 1
          if part > len(pair):
            break
        pair[part] += s
      else:
        pair[part] += splitter
    replace_map[pair[0]] = pair[1]
  return replace_map 

def populate_defaults(options):
  if not options.set_main_scope and not os.listdir(MAIN_SCOPE_CONF_DIR):
    with open(os.path.join(MAIN_SCOPE_CONF_DIR, DEFAULT_MAIN_SCOPE_CONF_FILE), 'wb') as f:
      f.write('events {\n  worker_connections %d;\n}\n' % options.worker_connections)

def load_config(options, previous_hash={}, replace_map={}):
  upstream = []
  upstream_sections = {}
  if options.upstream:
    upstream = options.upstream.split(',')
  if options.upstream_sections:
    upstream_sections = {k: v.split(',') for k, v in (i.split(':', 1) for i in options.upstream_sections)}
  if options.etcd_url:
    changed = False
    current_hash = {}
    conf = get_data('config', options.etcd_conf_key)
    if options.etcd_upstream_key:
      upstream = get_upstream('%s%s' % (options.etcd_url, options.etcd_upstream_key))
    if options.etcd_upstream_section_keys:
      upstream_sections = {k: get_upstream('%s%s' % (options.etcd_url, v)) for k,v in (i.split(':', 1) for i in options.etcd_upstream_section_keys)}
    if options.etcd_upstream_key or options.upstream:
      conf = replace_upstream('ETCD_CONF', conf, upstream)
    if options.etcd_upstream_section_keys or options.upstream_sections:
      for k, v in upstream_sections.iteritems():
        conf = replace_upstream('ETCD_CONF', conf, v, k)
    if replace_map:
      for k, v in replace_map.iteritems():
        conf = conf.replace(k, v)
    conf_file = os.path.join(options.set_main_scope and MAIN_SCOPE_CONF_DIR or CONF_DIR, options.etcd_output_file)
    current_hash['conf'] = write_conf(conf_file, conf, previous_hash.get('conf'))
    if current_hash['conf'] != previous_hash.get('conf'):
      fast_print('Loaded conf from %s. Saved to %s' % (options.etcd_conf_key, conf_file))
      if options.etcd_upstream_key or options.upstream:
        fast_print('Upstream: %s' % upstream)
    if options.etcd_ssl_cert_key:
      current_hash['ssl_cert'] = write_conf(options.ssl_cert_file, get_data('SSL cert', options.etcd_ssl_cert_key), previous_hash.get('ssl_cert'))
      current_hash['ssl_key'] = write_conf(options.ssl_cert_key_file, get_data('SSL key', options.etcd_ssl_cert_key_key), previous_hash.get('ssl_key'))
    for k in current_hash:
      if current_hash[k] != previous_hash.get(k):
        changed = True
        break
    populate_defaults(options)
    return changed, current_hash
  else:
    for conf_file in os.listdir(CONF_SOURCE_DIR):
      with open(os.path.join(CONF_SOURCE_DIR, conf_file), 'rb') as f:
        conf = f.read()
      conf = replace_upstream(os.path.join(CONF_SOURCE_DIR, conf_file), conf, upstream)
      for k, v in upstream_sections:
        conf = replace_upstream(os.path.join(CONF_SOURCE_DIR, conf_file), conf, v, k)
      if replace_map:
        for k, v in replace_map:
          conf = conf.replace(k, v)
      with open(os.path.join(options.set_main_scope and MAIN_SCOPE_CONF_DIR or CONF_DIR, conf_file), 'wb') as f:
        f.write(''.join(conf))
    populate_defaults(options)
    return None, None

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description="Run an nginx site")
  parser.add_argument('--upstream', default='', help='Dynamically set upstream servers')
  parser.add_argument('--upstream-section', dest='upstream_sections', action='append', help='Dynamically set upstream servers using key value pairs. section_id:values')
  parser.add_argument('--etcd-upstream-key', dest='etcd_upstream_key', default='', help='Dynamically set upstream servers')
  parser.add_argument('--etcd-upstream-section-key', dest='etcd_upstream_section_keys', action='append', help='Dynamically set upstream servers by name. Use upstream_id:etcd_url as the value. Can be passed multiple times.')
  parser.add_argument('--set-main-scope', dest='set_main_scope', default=False, help='Treat the retrieved config as top-level config (outside of the http scope)')
  parser.add_argument('--etcd-url', dest='etcd_url', default='', help='The etcd url to pull config from. If present, --upstream is ignored')
  parser.add_argument('--etcd-conf-key', dest='etcd_conf_key', default='/v2/keys/config/nginx', help='The key to pull config from.')
  parser.add_argument('--etcd-output-file', dest='etcd_output_file', default='service', help='The name to use when saving the conf from etcd.')
  parser.add_argument('--etcd-ssl-cert-key', dest='etcd_ssl_cert_key', default='', help='The key to pull an SSL cert from.')
  parser.add_argument('--etcd-ssl-cert-key-key', dest='etcd_ssl_cert_key_key', default='', help='The key to pull the key to an SSL cert from.')
  parser.add_argument('--ssl-cert-file', dest='ssl_cert_file', default='/var/nginx/security/service.crt', help='Where to save the ssl cert.')
  parser.add_argument('--ssl-cert-key-file', dest='ssl_cert_key_file', default='/var/nginx/security/service.key', help='Where to save the key to the ssl cert.')
  parser.add_argument('--replace', dest='replace', action='append', help='Optionally configure the updater to replace text within the output. Takes an arugment like old_text:new_text. To include a literal colon, use a double colon. (:: -> :)')
  parser.add_argument('--worker-connections', dest='worker_connections', default=1024, help='The number of worker connections to configure. Ignored if --set-main-scope is provided.')
  parser.add_argument('--monitor-interval', dest='monitor_interval', default=0.0, type=float, help='If > 0, the script will run this often (in seconds) and will call `nginx -s reload` if there is a config change.')
  options = parser.parse_args()

  replace_map = make_replace_map(options.replace)

  _, config_hash = load_config(options, replace_map=replace_map)
  if options.monitor_interval > 0:
    pid = os.fork()
    if pid != 0:
      print 'Running monitor id %s' % pid
    else:
      while True:
        sleep(options.monitor_interval)
        try:
          changed, config_hash = load_config(options, config_hash, replace_map=replace_map)
          if changed:
            print 'Config updated'
            subprocess.Popen(['nginx', '-s', 'reload'], stdout=subprocess.PIPE)
            print 'Nginx reloaded'
        except Exception as e:
          print 'Failed to load config: %s' % e
          print format_exc()
